import java.util.Random;


public class PrePartitionSolution extends AbstractSolution  {
	private long[] sequence;
	private int[] partitions;
	private KK solution;
	
	public PrePartitionSolution (long[] nums_init){
		sequence = nums_init;
		int n = sequence.length;
		partitions = new int[n];
		
		Random rand = new Random();
		for(int i = 0; i < n; i++){
			partitions[i] = rand.nextInt(n);
		}
		
		long[] mod_sequence = getNewSequence();
		solution = new KK(mod_sequence);
	}
	
	public PrePartitionSolution (long[] nums_init, int[] parts){
		sequence = nums_init;
		partitions = parts;
		
		long[] mod_sequence = getNewSequence();
		solution = new KK(mod_sequence);
	}
	

	
	private long[] getNewSequence(){
		long[] new_sequence = new long[sequence.length];
		return new_sequence;
	}
	
	public long getResidue(){
		return solution.getResidue();
	}
	
	public Solution getRandNeigbor(){
		return this;
	}
	
	public Solution randSolution(){
		return this;
	}
	
	
}
