import java.util.Random;


public class StandardSolution extends AbstractSolution {
	private long[] sequence;
	private boolean[] partitions;
	
	// constructor without partitions creates random solution
	public StandardSolution (long[] nums){
		sequence = nums;
		// TODO generate random partition set
	}

	public StandardSolution (long[] nums, boolean[] parts){
		sequence = nums;
		partitions = parts;
	}
	
	public long getResidue(){
		long residue = 0;
		for (int i = 0; i < sequence.length; i++){
			if (partitions[i])
				residue += sequence[i];
			else
				residue -= sequence[i];
		}
		return Math.abs(residue);
	}
	
	public Solution getRandNeigbor(){
		boolean[] neighbor_partitions = partitions;
		Random rand = new Random()
		int n = sequence.length;
		int i = rand.nextInt(sequence.length);
		int j = rand.nextInt(sequence.length);
		
		return new StandardSolution(sequence, neighbor_partitions);
	}
	
	public Solution randSolution(){
		return new StandardSolution(sequence);
	}
	

	
}
